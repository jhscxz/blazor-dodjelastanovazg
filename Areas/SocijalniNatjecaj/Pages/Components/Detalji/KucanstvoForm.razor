@using DodjelaStanovaZG.Enums
@using System.Globalization
@using DodjelaStanovaZG.Areas.SocijalniNatjecaj.DTO
@using MudBlazor

<MudCard Outlined="true" Rounded="true" Class="pa-6 border border-gray-300">
    <MudCardContent>
        <MudForm @ref="_form" Model="@Model">
            <MudGrid Gutter="Size.Small">

                <MudItem xs="12" sm="6">
                    <MudTextField T="decimal?"
                                  Label="Ukupni prihod kućanstva"
                                  @bind-Value="Model.UkupniPrihodKucanstva"
                                  Required="true"
                                  Variant="Variant.Outlined"
                                  Margin="Margin.Dense"
                                  Adornment="Adornment.End"
                                  AdornmentText="€"
                                  Class="mb-4" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudDatePicker T="DateTime?"
                                   Label="Prebivanje od"
                                   @bind-Date="_prebivanjeOd"
                                   Required="true"
                                   DateFormat="dd.MM.yyyy"
                                   Culture="@(new CultureInfo("hr-HR"))"
                                   Variant="Variant.Outlined"
                                   Margin="Margin.Dense"
                                   Class="mb-4" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudSelect T="StambeniStatusKucanstva?"
                               Label="Stambeni status kućanstva"
                               @bind-Value="Model.StambeniStatusKucanstva"
                               Required="true"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense"
                               Class="mb-4">
                        @foreach (var item in Enum.GetValues<StambeniStatusKucanstva>())
                        {
                            <MudSelectItem Value="(StambeniStatusKucanstva?)item">@item.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudSelect T="SastavKucanstva?"
                               Label="Sastav kućanstva"
                               @bind-Value="Model.SastavKucanstva"
                               Required="true"
                               Variant="Variant.Outlined"
                               Margin="Margin.Dense"
                               Class="mb-4">
                        @foreach (var item in Enum.GetValues<SastavKucanstva>())
                        {
                            <MudSelectItem Value="(SastavKucanstva?)item">@item.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

            </MudGrid>

            <MudStack Row="true" Justify="Justify.FlexEnd" Spacing="2" Class="mt-4">
                <MudButton OnClick="@OnValidSubmit"
                           StartIcon="@Icons.Material.Filled.Save"
                           Size="Size.Small"
                           Variant="Variant.Filled"
                           Color="Color.Primary">
                    Spremi
                </MudButton>

                <MudButton OnClick="@OnCancel"
                           StartIcon="@Icons.Material.Filled.Cancel"
                           Size="Size.Small"
                           Variant="Variant.Filled"
                           Color="Color.Default">
                    Odustani
                </MudButton>
            </MudStack>
        </MudForm>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    public required SocijalniKucanstvoPodaciDto Model { get; set; }

    [Parameter]
    public EventCallback OnValidSubmitCallback { get; set; }

    [Parameter]
    public EventCallback OnCancelCallback { get; set; }

    private MudForm _form = null!;
    private DateTime? _prebivanjeOd;

    protected override void OnInitialized()
    {
        _prebivanjeOd = Model.PrebivanjeOd?.ToDateTime(new TimeOnly(0));
    }

    private async Task OnValidSubmit()
    {
        await _form.Validate();
        if (_form.IsValid)
        {
            Model.PrebivanjeOd = _prebivanjeOd.HasValue
                ? DateOnly.FromDateTime(_prebivanjeOd.Value)
                : null;

            await OnValidSubmitCallback.InvokeAsync();
        }
    }

    private async Task OnCancel()
    {
        await OnCancelCallback.InvokeAsync();
    }
}

// ReSharper disable StringLiteralTypo
// ReSharper disable CommentTypo

using DodjelaStanovaZG.Areas.Natjecaji.SocijalniNatjecaj.Services.IServices;
using DodjelaStanovaZG.Data;
using DodjelaStanovaZG.Enums;
using DodjelaStanovaZG.Models;
using Microsoft.EntityFrameworkCore;

// ‚¨áÔ∏è File‚Äëscoped namespace ‚Äì C# 10+
namespace DodjelaStanovaZG.Areas.Natjecaji.SocijalniNatjecaj.Services;

/// <summary>
/// Servis za pronala≈æenje i pohranu bodovnih gre≈°aka u socijalnom natjeƒçaju.
/// </summary>
/// <remarks>
/// 1. "Dedup" logika osigurava da se isti kod gre≈°ke ne dodaje dvaput.
/// 2. Izraƒçuni godina koriste <see cref="DateOnly.AddYears"/>, ƒçime se izbjegavaju gre≈°ke oko dana, mjeseca i prestupnih godina.
/// 3. Svako poslovno pravilo je izdvojeno u zaseban helper radi preglednosti i lak≈°eg testiranja.
/// </remarks>
public sealed class SocijalniBodovnaGreskaService(ApplicationDbContext context)
    : ISocijalniBodovnaGreskaService
{
    #region PublicAPI

    /// <inheritdoc />
    private async Task<List<SocijalniNatjecajBodovnaGreska>> GetByZahtjevIdAsync(long zahtjevId) =>
        await context.SocijalniNatjecajBodovnaGreske
                     .Where(g => g.ZahtjevId == zahtjevId && g.IsActive)
                     .ToListAsync();

    /// <inheritdoc />
    public Task<List<SocijalniNatjecajBodovnaGreska>> PronadiGreskeAsync(SocijalniNatjecajZahtjev zahtjev)
    {
        var errors = new Dictionary<string, SocijalniNatjecajBodovnaGreska>();
        var today  = DateOnly.FromDateTime(DateTime.Today);

        // üß©¬†Helper za dodavanje jedinstvenih gre≈°aka
        void Add(string code, string message)
        {
            if (errors.ContainsKey(code)) return; // jedan kod = jedna poruka

            errors[code] = new SocijalniNatjecajBodovnaGreska
            {
                ZahtjevId = zahtjev.Id,
                Kod       = code,
                Poruka    = message
            };
        }

        // ‚úîÔ∏è¬†Provjere
        ProvjeriKucanstvo();
        ProvjeriPodnositelja();
        ProvjeriPrihode();
        ProvjeriSamackoKucanstvo();

        return Task.FromResult(errors.Values.ToList());

        #region Local¬†helpers

        void ProvjeriKucanstvo()
        {
            var prebivanjeOd = zahtjev.KucanstvoPodaci?.PrebivanjeOd;

            if (prebivanjeOd is { } date && date != DateOnly.MinValue)
            {
                if (today < date.AddYears(3))
                    Add("PRE-001", "Prebivali≈°te kuƒáanstva kraƒáe od 3 godine.");
            }
            else
            {
                Add("PRE-002", "Nije unesen podatak o prebivali≈°tu kuƒáanstva.");
            }

            if ((int?) zahtjev.KucanstvoPodaci?.StambeniStatusKucanstva is 0 or null)
                Add("STA-001", "Nije odabran stambeni status kuƒáanstva.");

            if ((int?) zahtjev.KucanstvoPodaci?.SastavKucanstva is 0 or null)
                Add("SAS-001", "Nije odabran sastav kuƒáanstva.");
        }

        void ProvjeriPodnositelja()
        {
            var p = zahtjev.Clanovi.FirstOrDefault(c => c.Srodstvo == Srodstvo.PodnositeljZahtjeva);

            // ‚û•¬†Datum roƒëenja
            if (p == null || p.DatumRodjenja == DateOnly.MinValue)
            {
                Add("POD-001", "Podnositelj nema unesen datum roƒëenja.");
            }
            else if (today < p.DatumRodjenja.AddYears(18))
            {
                Add("POD-002", "Podnositelj zahtjeva ne mo≈æe biti maloljetna osoba.");
            }

            // ‚û•¬†OIB
            if (string.IsNullOrWhiteSpace(p?.Oib))
                Add("POD-003", "Podnositelj nema unesen OIB.");

            foreach (var clan in zahtjev.Clanovi.Where(c => string.IsNullOrWhiteSpace(c.Oib)))
                Add("OIB-001", $"ƒålan '{clan.ImePrezime}' nema unesen OIB.");

            // ‚û•¬†Prebivali≈°te podnositelja
            var preb = zahtjev.KucanstvoPodaci?.PrebivanjeOd ?? DateOnly.MinValue;
            if (preb != DateOnly.MinValue && today < preb.AddYears(3))
                Add("PRE-003", "Podnositelj ima prebivali≈°te kraƒáe od 3 godine.");
        }

        void ProvjeriPrihode()
        {
            var prihod = zahtjev.KucanstvoPodaci?.Prihod;
            if (prihod is null)
            {
                Add("PRI-001", "Nije unesen podatak o ukupnom prihodu kuƒáanstva.");
                return;
            }

            var prosjekPlace = zahtjev.Natjecaj?.ProsjekPlace ?? 0m;
            if (prosjekPlace <= 0)
            {
                Add("PRI-003", "Prosjeƒçna plaƒáa nije definirana u natjeƒçaju.");
                return;
            }

            var brojClanova      = Math.Max(zahtjev.Clanovi.Count, 1);
            var prihodPoClanuMj  = prihod.UkupniPrihodKucanstva / brojClanova / 12m;
            var jeSamacko        = zahtjev.KucanstvoPodaci?.SastavKucanstva == SastavKucanstva.SamackoKucanstvo;
            var limit            = prosjekPlace * (jeSamacko ? 0.50m : 0.30m);

            if (prihodPoClanuMj > limit)
                Add("PRI-002", $"Mjeseƒçni prihod po ƒçlanu ({prihodPoClanuMj:C}) prelazi dopu≈°teni ({limit:C}).");
        }

        void ProvjeriSamackoKucanstvo()
        {
            if (zahtjev.KucanstvoPodaci?.SastavKucanstva != SastavKucanstva.SamackoKucanstvo)
                return;

            if (zahtjev.Clanovi.Count > 1)
                Add("SAM-001", "Samaƒçko kuƒáanstvo ne mo≈æe imati vi≈°e od jednog ƒçlana.");

            if (zahtjev.BodovniPodaci?.BrojMaloljetnihKorisnikaInvalidnine > 0)
                Add("SAM-002", "Samaƒçko kuƒáanstvo ne mo≈æe imati maloljetnog korisnika invalidnine.");

            if (zahtjev.BodovniPodaci?.StatusRoditeljaNjegovatelja == true)
                Add("SAM-003", "Samaƒçko kuƒáanstvo ne mo≈æe imati status roditelja njegovatelja.");

            if (zahtjev.BodovniPodaci?.BrojUzdrzavanePunoljetneDjece > 0)
                Add("SAM-004", "Samaƒçko kuƒáanstvo ne mo≈æe imati uzdr≈æavanu punoljetnu djecu.");

            if (zahtjev.BodovniPodaci?.BrojOsobaUAlternativnojSkrbi > 0)
                Add("SAM-005", "Samaƒçko kuƒáanstvo ne mo≈æe imati osobu iz alternativne skrbi.");

            if (zahtjev.BodovniPodaci?.BrojOdraslihKorisnikaInvalidnine > 0)
                Add("SAM-006", "Samaƒçko kuƒáanstvo ne mo≈æe imati odraslog korisnika invalidnine.");
        }

        #endregion
    }

    #endregion
}
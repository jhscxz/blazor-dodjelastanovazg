@using System.Linq.Expressions
@using MudBlazor
@typeparam T

<MudTextField T="T"
              @bind-Value="CurrentValue"
              @bind-ValueExpression="ValueExpression"
              Label="@Label"
              Variant="@Variant"
              Margin="Margin.Dense"
              Required="@Required"
              InputType="@InputType"
              Lines="@Lines"
              ShrinkLabel="true"
              ReadOnly="@ReadOnly"
              Class="@Class"
              @attributes="AdditionalAttributes"
/>

@code {
    [Parameter] public T? Value { get; set; }
    [Parameter] public EventCallback<T?> ValueChanged { get; set; }
    [Parameter] public Expression<Func<T?>>? ValueExpression { get; set; }
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public bool Required { get; set; }
    [Parameter] public int Lines { get; set; } = 1;
    [Parameter] public bool ReadOnly { get; set; } = false;
    [Parameter] public InputType InputType { get; set; } = InputType.Text;
    [Parameter] public Variant Variant { get; set; } = Variant.Text;
    [Parameter] public string Class { get; set; } = string.Empty;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private T? CurrentValue
    {
        get => Value;
        set
        {
            if (EqualityComparer<T?>.Default.Equals(value, Value)) return;
            Value = value;
            ValueChanged.InvokeAsync(value);
        }
    }

}

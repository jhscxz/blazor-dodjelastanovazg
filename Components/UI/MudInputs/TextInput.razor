@using MudBlazor
@typeparam T

<MudTextField T="T"
              ShrinkLabel="true"
              Value="@Value"
              ValueChanged="@OnValueChanged"
              Label="@Label"
              Variant="Variant.Text"
              Margin="Margin.Dense"
              Required="@Required"
              InputType="@InputType"
              Lines="@Lines"
              Typo="Typo.subtitle1"
              ReadOnly="@ReadOnly"
              @attributes="AdditionalAttributes"/>

@code {
    [Parameter] public T? Value { get; set; }

    [Parameter] public EventCallback<T> ValueChanged { get; set; }
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public bool Required { get; set; }
    [Parameter] public int Lines { get; set; } = 1;
    [Parameter] public bool ReadOnly { get; set; } = false;
    [Parameter] public InputType InputType { get; set; } = InputType.Text;
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private async Task OnValueChanged(T value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(value);
    }
}